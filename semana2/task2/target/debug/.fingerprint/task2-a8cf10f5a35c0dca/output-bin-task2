{"message":"this file contains an unclosed delimiter","code":null,"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":1234,"byte_end":1235,"line_start":42,"line_end":42,"column_start":64,"column_end":65,"is_primary":false,"text":[{"text":"fn split(msg_bytes: &[u8], mut share1: File, mut share2: File) {","highlight_start":64,"highlight_end":65}],"label":"unclosed delimiter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":1610,"byte_end":1610,"line_start":53,"line_end":53,"column_start":35,"column_end":35,"is_primary":true,"text":[{"text":"    share2.write(encrypted_bytes);","highlight_start":35,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this file contains an unclosed delimiter\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:53:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn split(msg_bytes: &[u8], mut share1: File, mut share2: File) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14munclosed delimiter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    share2.write(encrypted_bytes);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\n"}
{"message":"`~` cannot be used as a unary operator","code":null,"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":82,"byte_end":83,"line_start":6,"line_end":6,"column_start":15,"column_end":16,"is_primary":true,"text":[{"text":"    let args: ~[~str] = os::args();","highlight_start":15,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use `!` to perform bitwise not","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":82,"byte_end":83,"line_start":6,"line_end":6,"column_start":15,"column_end":16,"is_primary":true,"text":[{"text":"    let args: ~[~str] = os::args();","highlight_start":15,"highlight_end":16}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `~` cannot be used as a unary operator\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:6:15\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let args: ~[~str] = os::args();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: use `!` to perform bitwise not\u001b[0m\n\n"}
{"message":"`~` cannot be used as a unary operator","code":null,"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":84,"byte_end":85,"line_start":6,"line_end":6,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"    let args: ~[~str] = os::args();","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use `!` to perform bitwise not","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":84,"byte_end":85,"line_start":6,"line_end":6,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"    let args: ~[~str] = os::args();","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `~` cannot be used as a unary operator\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:6:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let args: ~[~str] = os::args();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: use `!` to perform bitwise not\u001b[0m\n\n"}
{"message":"expected `const`, found `[`","code":null,"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":83,"byte_end":84,"line_start":6,"line_end":6,"column_start":16,"column_end":17,"is_primary":true,"text":[{"text":"    let args: ~[~str] = os::args();","highlight_start":16,"highlight_end":17}],"label":"expected `const`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":76,"byte_end":80,"line_start":6,"line_end":6,"column_start":9,"column_end":13,"is_primary":false,"text":[{"text":"    let args: ~[~str] = os::args();","highlight_start":9,"highlight_end":13}],"label":"while parsing the type for `args`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use `=` if you meant to assign","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":80,"byte_end":81,"line_start":6,"line_end":6,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"    let args: ~[~str] = os::args();","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":" =","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected `const`, found `[`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:6:16\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let args: ~[~str] = os::args();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `const`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: use `=` if you meant to assign\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mwhile parsing the type for `args`\u001b[0m\n\n"}
{"message":"`~` cannot be used as a unary operator","code":null,"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":403,"byte_end":404,"line_start":16,"line_end":16,"column_start":32,"column_end":33,"is_primary":true,"text":[{"text":"                let msg_bytes: ~[u8] = msg.read_to_end();","highlight_start":32,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use `!` to perform bitwise not","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":403,"byte_end":404,"line_start":16,"line_end":16,"column_start":32,"column_end":33,"is_primary":true,"text":[{"text":"                let msg_bytes: ~[u8] = msg.read_to_end();","highlight_start":32,"highlight_end":33}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `~` cannot be used as a unary operator\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:16:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let msg_bytes: ~[u8] = msg.read_to_end();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: use `!` to perform bitwise not\u001b[0m\n\n"}
{"message":"expected `const`, found `[`","code":null,"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":404,"byte_end":405,"line_start":16,"line_end":16,"column_start":33,"column_end":34,"is_primary":true,"text":[{"text":"                let msg_bytes: ~[u8] = msg.read_to_end();","highlight_start":33,"highlight_end":34}],"label":"expected `const`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":392,"byte_end":401,"line_start":16,"line_end":16,"column_start":21,"column_end":30,"is_primary":false,"text":[{"text":"                let msg_bytes: ~[u8] = msg.read_to_end();","highlight_start":21,"highlight_end":30}],"label":"while parsing the type for `msg_bytes`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use `=` if you meant to assign","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":401,"byte_end":402,"line_start":16,"line_end":16,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"                let msg_bytes: ~[u8] = msg.read_to_end();","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":" =","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected `const`, found `[`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:16:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let msg_bytes: ~[u8] = msg.read_to_end();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `const`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: use `=` if you meant to assign\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mwhile parsing the type for `msg_bytes`\u001b[0m\n\n"}
{"message":"expected `const`, found `[`","code":null,"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":1067,"byte_end":1068,"line_start":34,"line_end":34,"column_start":32,"column_end":33,"is_primary":true,"text":[{"text":"fn xor(a: &[u8], b: &[u8]) -> ~[u8] {","highlight_start":32,"highlight_end":33}],"label":"expected `const`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected `const`, found `[`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:34:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn xor(a: &[u8], b: &[u8]) -> ~[u8] {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `const`\u001b[0m\n\n"}
{"message":"aborting due to 7 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 7 previous errors\u001b[0m\n\n"}
